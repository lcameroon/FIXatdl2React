{"version":3,"sources":["FIXatdl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FIXatdl2Json","data","style","height","background","color","padding","sampleFIXatdl","FIXatdlTexarea","value","onChange","TextArea","Input","defaultValue","marginBottom","FIXatdlBuilder","atdlJson","atdl","JSON","parse","error","Strategies","Widget","Form","useForm","form","Strategy","Parameter","StrategyPanel","boxShadow","bordered","title","labelCol","span","wrapperCol","name","buildStrategy","buildControlPanel","Option","Select","rederStrategyForm","_attributes","Item","label","rules","required","wireValue","placeholder","allowClear","paddingLeft","fixMsgType","isArray","map","strategy","controls","getParams","parameterRef","result","find","attr","key","ID","moment","use12Hours","format","min","minValue","replace","max","maxValue","formatter","parser","App","useState","json","setJson","setXml2Json","xml","xml2json","compact","spaces","message","Header","Content","gutter","event","target","onClick","type","size","block","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.14d368fa.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport {\n  Input,\n  Card,\n  Form,\n  Select,\n  DatePicker,\n  TimePicker,\n  Space,\n  InputNumber,\n} from 'antd';\n\nexport const FIXatdl2Json = ({ data = '' }) => {\n  const styles = {\n    height: 300,\n    background: '#333',\n    color: '#fff',\n    padding: 8,\n  };\n  return (\n    <Fragment>\n      <strong>FIXatdl JSON</strong> <br />\n      <pre style={styles}>{data}</pre>\n    </Fragment>\n  );\n};\n\nexport const sampleFIXatdl = `<Strategies>\n  <Strategy name=\"Tazer\" uiRep=\"Tazer\" wireValue=\"3000\" fixMsgType=\"D\">\n  <Parameter name=\"EffectiveTime\" xsi:type=\"UTCTimestamp_t\" fixTag=\"168\"/>\n  <Parameter name=\"VolTarget\" xsi:type=\"Percentage_t\" fixTag=\"7641\" minValue=\"0.01\" maxValue=\"0.75\"/>\n  <lay:StrategyLayout>\n      <lay:StrategyPanel>\n          <lay:Control xsi:type=\"lay:Clock_t\" ID=\"StartTimeClock\" label=\"Start Time\" parameterRef=\"EffectiveTime\"/>\n          <lay:Control xsi:type=\"lay:SingleSpinner_t\" ID=\"VolSpinner\" label=\"Target (1-75%)\" parameterRef=\"VolTarget\"/>\n      </lay:StrategyPanel>\n  </lay:StrategyLayout>\n  </Strategy>\n</Strategies>`;\n\nexport const FIXatdlTexarea: React.FC<any> = ({ value, onChange }) => {\n  const { TextArea } = Input;\n  return (\n    <Fragment>\n      <strong>FIXatdl XML</strong> <br />\n      <TextArea\n        defaultValue={sampleFIXatdl}\n        style={{ height: '80vh', marginBottom: 16 }}\n        onChange={onChange}\n      />\n    </Fragment>\n  );\n};\n\nexport const FIXatdlBuilder = ({ atdlJson = '' }) => {\n  let atdl: any = {};\n\n  try {\n    atdl = atdlJson && JSON.parse(atdlJson);\n  } catch {\n    atdl = { error: 'Error!!!' };\n  }\n  return (\n    <Fragment>\n      {atdl.error ? <p>{atdl.error}</p> : atdl.Strategies && <Widget atdl={atdl} />}\n    </Fragment>\n  );\n};\n\nconst Widget = ({ atdl }: any) => {\n  const [form] = Form.useForm();\n  const layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n  };\n\n  const { Strategies } = atdl;\n  const { Strategy } = Strategies;\n  const { Parameter } = Strategy;\n  const StrategyPanel = Strategy['lay:StrategyLayout']['lay:StrategyPanel'];\n  return (\n    <Card\n      style={{\n        boxShadow: `0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)`,\n      }}\n      bordered\n      title=\"Order Widget\">\n      <Form {...layout} form={form} name=\"control-hooks\">\n        {buildStrategy(Strategy)}\n        {buildControlPanel(StrategyPanel, Parameter)}\n      </Form>\n    </Card>\n  );\n};\n\nconst buildStrategy = (Strategy: any | any[]) => {\n  const { Option } = Select;\n  const rederStrategyForm = ({ _attributes }: any) => (\n    <Form.Item name=\"Strategy\" label=\"Strategy\" rules={[{ required: true }]}>\n      <Select\n        defaultValue={_attributes.wireValue}\n        placeholder=\"Select a strategy\"\n        allowClear>\n        <Option value={_attributes.wireValue}>\n          {_attributes.name}\n          <small style={{ paddingLeft: 16 }}>\n            (value: {_attributes.wireValue} | fixType: {_attributes.fixMsgType})\n          </small>\n        </Option>\n      </Select>\n    </Form.Item>\n  );\n  return isArray(Strategy)\n    ? Strategy.map((strategy) => rederStrategyForm(strategy))\n    : rederStrategyForm(Strategy);\n};\n\nconst buildControlPanel = (StrategyPanel: any, Parameter: any) => {\n  const controls: any[] = StrategyPanel['lay:Control'] || [];\n\n  const getParams = (parameterRef: string) => {\n    const result = find(Parameter, ['_attributes.name', parameterRef]);\n    return result?._attributes;\n  };\n\n  return controls.map(({ _attributes: attr }) => (\n    <Form.Item key={attr.parameterRef} label={attr.label} rules={[{ required: true }]}>\n      {attr.ID === 'StartTimeClock' ? (\n        <Space>\n          <DatePicker defaultValue={moment()} />\n          <TimePicker use12Hours format=\"h:mm:ss A\" defaultValue={moment()} />\n        </Space>\n      ) : null}\n      {attr.ID === 'VolSpinner' ? (\n        <InputNumber\n          defaultValue={100}\n          min={getParams(attr.parameterRef)?.minValue.replace('.', '') || 1}\n          max={getParams(attr.parameterRef)?.maxValue.replace('.', '') || 100}\n          formatter={(value) => `${value}%`}\n          parser={(value: any) => value.replace('%', '')}\n        />\n      ) : null}\n    </Form.Item>\n  ));\n};\n","import React, { useState } from 'react';\nimport parser from 'xml-js';\nimport { Row, Col, Divider, Layout, Button, message } from 'antd';\n\nimport { FIXatdlTexarea, FIXatdl2Json, FIXatdlBuilder, sampleFIXatdl } from './FIXatdl';\n\nfunction App() {\n  const [json, setJson] = useState('');\n\n  const setXml2Json = (xml: string) => {\n    let result = '';\n    try {\n      result = parser.xml2json(xml, { compact: true, spaces: 2 });\n    } catch {\n      message.error('Error parsing FIXatdl XML');\n    }\n    setJson(result);\n  };\n\n  const onChange = (event: any) => {\n    setXml2Json(event.target.value);\n  };\n\n  const buildWidget = () => {\n    if (json === '') {\n      setXml2Json(sampleFIXatdl);\n    }\n  };\n\n  return (\n    <Layout>\n      <Layout.Header>\n        <h3 style={{ color: '#FFF' }}>FIXatdl 2 React Widget</h3>\n      </Layout.Header>\n      <Layout.Content style={{ height: 'calc(100vh - 64px)', padding: '24px 50px' }}>\n        <Row gutter={24}>\n          <Col span={12}>\n            <FIXatdlTexarea onChange={onChange} />\n          </Col>\n          <Col span={12}>\n            <FIXatdl2Json data={json} />\n            <Button onClick={buildWidget} type=\"primary\" size=\"large\" block>\n              Build Widget\n            </Button>\n            <Divider />\n            <FIXatdlBuilder atdlJson={json} />\n          </Col>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}